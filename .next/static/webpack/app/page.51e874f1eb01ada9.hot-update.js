"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/csvExport.ts":
/*!********************************!*\
  !*** ./src/utils/csvExport.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   candidatesToCSVData: function() { return /* binding */ candidatesToCSVData; },\n/* harmony export */   downloadCSV: function() { return /* binding */ downloadCSV; },\n/* harmony export */   exportCandidatesToCSV: function() { return /* binding */ exportCandidatesToCSV; },\n/* harmony export */   formatDate: function() { return /* binding */ formatDate; },\n/* harmony export */   getContactInfo: function() { return /* binding */ getContactInfo; },\n/* harmony export */   getProgressPercentage: function() { return /* binding */ getProgressPercentage; },\n/* harmony export */   getScoreDisplay: function() { return /* binding */ getScoreDisplay; },\n/* harmony export */   getStatusDisplay: function() { return /* binding */ getStatusDisplay; }\n/* harmony export */ });\nfunction formatDate(dateString) {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n    });\n}\nfunction getProgressPercentage(candidate) {\n    const totalQuestions = candidate.questions.length;\n    const answeredQuestions = candidate.answers.length;\n    const percentage = totalQuestions > 0 ? Math.round(answeredQuestions / totalQuestions * 100) : 0;\n    return \"\".concat(percentage, \"% (\").concat(answeredQuestions, \"/\").concat(totalQuestions, \")\");\n}\nfunction getStatusDisplay(status) {\n    switch(status){\n        case \"pending\":\n            return \"Pending\";\n        case \"in-progress\":\n            return \"In Progress\";\n        case \"completed\":\n            return \"Completed\";\n        case \"paused\":\n            return \"Paused\";\n        default:\n            return status;\n    }\n}\nfunction getScoreDisplay(candidate) {\n    if (candidate.status === \"completed\") {\n        return \"\".concat(candidate.finalScore, \"/100\");\n    } else if (candidate.answers.length > 0) {\n        const averageScore = candidate.answers.reduce((sum, answer)=>sum + ((answer === null || answer === void 0 ? void 0 : answer.score) || 0), 0) / candidate.answers.length;\n        return \"\".concat(Math.round(averageScore), \"/100 (partial)\");\n    }\n    return \"Not started\";\n}\nfunction getContactInfo(candidate) {\n    const parts = [];\n    if (candidate.email) parts.push(candidate.email);\n    if (candidate.phone) parts.push(candidate.phone);\n    return parts.join(\" | \");\n}\nfunction candidatesToCSVData(candidates) {\n    return candidates.map((candidate)=>({\n            candidate: candidate.name,\n            contact: getContactInfo(candidate),\n            status: getStatusDisplay(candidate.status),\n            score: getScoreDisplay(candidate),\n            date: formatDate(candidate.startedAt),\n            progress: getProgressPercentage(candidate),\n            actions: candidate.status === \"completed\" ? \"View Results\" : candidate.status === \"in-progress\" ? \"Continue Interview\" : candidate.status === \"paused\" ? \"Resume Interview\" : \"Start Interview\"\n        }));\n}\nfunction downloadCSV(data) {\n    let filename = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"candidates.csv\";\n    // Create CSV content\n    const headers = [\n        \"Candidate\",\n        \"Contact\",\n        \"Status\",\n        \"Score\",\n        \"Date\",\n        \"Progress\",\n        \"Actions\"\n    ];\n    const csvContent = [\n        headers.join(\",\"),\n        ...data.map((row)=>[\n                '\"'.concat(row.candidate, '\"'),\n                '\"'.concat(row.contact, '\"'),\n                '\"'.concat(row.status, '\"'),\n                '\"'.concat(row.score, '\"'),\n                '\"'.concat(row.date, '\"'),\n                '\"'.concat(row.progress, '\"'),\n                '\"'.concat(row.actions, '\"')\n            ].join(\",\"))\n    ].join(\"\\n\");\n    // Create and download file\n    const blob = new Blob([\n        csvContent\n    ], {\n        type: \"text/csv;charset=utf-8;\"\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute(\"href\", url);\n        link.setAttribute(\"download\", filename);\n        link.style.visibility = \"hidden\";\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n}\nfunction exportCandidatesToCSV(candidates) {\n    const csvData = candidatesToCSVData(candidates);\n    const timestamp = new Date().toISOString().split(\"T\")[0];\n    const filename = \"interviewai-candidates-\".concat(timestamp, \".csv\");\n    downloadCSV(csvData, filename);\n    // Show success message\n    console.log(\"âœ… CSV exported successfully: \".concat(filename, \" (\").concat(candidates.length, \" candidates)\"));\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/csvExport.ts\n"));

/***/ })

});